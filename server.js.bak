const express = require('express');
const path = require('path');
const multer = require('multer');
const fs = require('fs');
const app = express();
const dotenv = require('dotenv');

const MAX_FILE_SIZE_MB = 1024; // 1GB
const PORT = process.env.EXPRESS_PORT || 8080;
const UPLOAD_DIR = path.join(__dirname, 'uploads');

// Load environment variables from .env file
dotenv.config();

// Ensure the upload directory exists
if (!fs.existsSync(UPLOAD_DIR)){
    fs.mkdirSync(UPLOAD_DIR);
}

// Set up Multer storage for local file uploads
const storage = multer.diskStorage({
    destination: function (req, file, cb) {
        cb(null, UPLOAD_DIR);
    },
    filename: function (req, file, cb) {
        cb(null, file.originalname);
    }
});

const upload = multer({
    storage: storage,
    limits: {
        fileSize: MAX_FILE_SIZE_MB * 1024 * 1024
    },
}).single('file');

// Serve static files from the "public" directory
app.use(express.static(path.join(__dirname, 'public')));

// Serve uploaded files
app.use('/uploads', express.static(UPLOAD_DIR));

// Handle file upload POST request
app.post('/upload', (req, res) => {
    upload(req, res, (err) => {
        if (err instanceof multer.MulterError) {
            // Multer error occurred
            if (err.code === 'LIMIT_FILE_SIZE') {
                return res.status(400).send(`File size exceeds the limit of ${MAX_FILE_SIZE_MB}MB`);
            }
            return res.status(500).send('Error uploading file');
        } else if (err) {
            // Other error occurred
            console.error('Error uploading file:', err);
            return res.status(500).send('Error uploading file');
        }

        const file = req.file;

        if (!file) {
            return res.status(400).send('No file selected');
        }

        const fileUrl = `/uploads/${file.filename}`;
        res.json({ url: fileUrl });
    });
});

// Start the server
app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
});
